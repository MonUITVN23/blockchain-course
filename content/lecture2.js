// Bu·ªïi 2 Content - C√°c Nguy√™n l√Ω M·∫≠t m√£ h·ªçc trong Blockchain
// This file will be loaded dynamically by the main index.html

// Add slides for Bu·ªïi 2
addSlide(`
<div class="slide active">
    <div class="slide-title-page">
        <img src="assets/logo.png" alt="Logo" class="title-page-logo" onerror="this.style.display='none'">
        <div class="title-content">
            <div class="main-title">Blockchain: N·ªÅn t·∫£ng, ·ª®ng d·ª•ng & B·∫£o m·∫≠t</div>
            <h1>C√°c Nguy√™n l√Ω M·∫≠t m√£ h·ªçc<br>trong Blockchain</h1>
            <div class="instructor-info"><span>Gi·∫£ng vi√™n: ThS. Tr·∫ßn Tu·∫•n D≈©ng</span></div>
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>M·ª•c ti√™u Bu·ªïi h·ªçc üéØ</h2>
    <div class="slide-content">
        <p>K·∫øt th√∫c bu·ªïi h·ªçc, sinh vi√™n s·∫Ω n·∫Øm v·ªØng:</p>
        <ul>
            <li><strong>H√†m bƒÉm M·∫≠t m√£:</strong> C√°ch t·∫°o ra "v√¢n tay s·ªë" v√† vai tr√≤ c·ªßa n√≥.</li>
            <li><strong>M·∫≠t m√£ h√≥a Kh√≥a c√¥ng khai:</strong> C√°ch t·∫°o ra danh t√≠nh v√† s·ªü h·ªØu t√†i s·∫£n s·ªë.</li>
            <li><strong>Ch·ªØ k√Ω s·ªë:</strong> C√°ch x√°c th·ª±c giao d·ªãch m√† kh√¥ng c·∫ßn trung gian.</li>
            <li><strong>C√¢y Merkle:</strong> C√°ch Blockchain qu·∫£n l√Ω h√†ng ng√†n giao d·ªãch m·ªôt c√°ch hi·ªáu qu·∫£.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>√în l·∫°i Bu·ªïi 1 & D·∫´n nh·∫≠p</h2>
    <div class="slide-content">
        <p>Bu·ªïi tr∆∞·ªõc, ch√∫ng ta ƒë√£ ƒë·∫∑t c√¢u h·ªèi: "L√†m sao ƒë·ªÉ x√¢y d·ª±ng <strong>ni·ªÅm tin</strong> trong m·ªôt h·ªá th·ªëng kh√¥ng c√≥ ng∆∞·ªùi l√£nh ƒë·∫°o?"</p>

        <div class="highlight-box" style="font-size: 1.5em;">
            C√¢u tr·∫£ l·ªùi l√†: <strong>Cryptography (M·∫≠t m√£ h·ªçc)</strong>
        </div>
        
        <p>M·∫≠t m√£ h·ªçc thay th·∫ø ni·ªÅm tin v√†o m·ªôt t·ªï ch·ª©c b·∫±ng ni·ªÅm tin v√†o c√°c quy lu·∫≠t to√°n h·ªçc. H√¥m nay, ch√∫ng ta s·∫Ω t√¨m hi·ªÉu c√°ch n√≥ ho·∫°t ƒë·ªông.</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Ph·∫ßn I: H√†m bƒÉm - "V√¢n tay" c·ªßa D·ªØ li·ªáu</h2>
    <div class="slide-content">
        <p>H√£y t∆∞·ªüng t∆∞·ª£ng h√†m bƒÉm nh∆∞ m·ªôt chi·∫øc m√°y xay ma thu·∫≠t:</p>
        <ul>
            <li>B·∫°n c√≥ th·ªÉ cho b·∫•t c·ª© th·ª© g√¨ v√†o: m·ªôt ch·ªØ c√°i, m·ªôt cu·ªën s√°ch, m·ªôt b·ªô phim...</li>
            <li>ƒê·∫ßu ra (k·∫øt qu·∫£ bƒÉm) lu√¥n l√† m·ªôt chu·ªói k√Ω t·ª± c√≥ ƒë·ªô d√†i kh√¥ng ƒë·ªïi.</li>
            <li>Kh√¥ng th·ªÉ n√†o t·ª´ "b·ªôt" xay ra m√† r√°p l·∫°i th√†nh v·∫≠t th·ªÉ ban ƒë·∫ßu.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Minh h·ªça v·ªÅ H√†m bƒÉm (SHA-256)</h2>
    <div class="slide-content">
        <p>S·ª± thay ƒë·ªïi d√π nh·ªè nh·∫•t ·ªü ƒë·∫ßu v√†o c≈©ng t·∫°o ra k·∫øt qu·∫£ kh√°c bi·ªát ho√†n to√†n.</p>
        
        <div class="code-block">
            // ƒê·∫ßu v√†o 1<br>
            <strong>Input:</strong> "Xin chao the gioi"<br>
            <strong>Output:</strong> 29b0e219...18d91f42<br><br>
            // Ch·ªâ thay ƒë·ªïi 1 k√Ω t·ª± 'X' -> 'x'<br>
            <strong>Input:</strong> "xin chao the gioi"<br>
            <strong>Output:</strong> 99933390...6044702d // K·∫øt qu·∫£ kh√°c bi·ªát 100%!
        </div>
        
        <p>‚Üí ƒê√¢y g·ªçi l√† <strong>Hi·ªáu ·ª©ng th√°c ƒë·ªï (Avalanche Effect)</strong>.</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>ƒê·∫∑c t√≠nh V√ÄNG c·ªßa H√†m bƒÉm (1/3)</h2>
    <div class="slide-content">
        <h3>T√≠nh ƒë∆°n ƒë·ªãnh (Deterministic)</h3>
        <ul>
            <li>M·ªôt ƒë·∫ßu v√†o <strong>lu√¥n lu√¥n</strong> t·∫°o ra c√πng m·ªôt k·∫øt qu·∫£ ƒë·∫ßu ra.</li>
            <li><code>hash("Syllabus")</code> h√¥m nay hay 10 nƒÉm sau v·∫´n cho ra c√πng m·ªôt chu·ªói hash.</li>
        </ul>
        
        <div class="highlight-box" style="font-size: 1.3em; text-align: left; margin-top: 30px;">
            <strong>T·∫°i sao quan tr·ªçng?:</strong> Cho ph√©p m·ªçi ng∆∞·ªùi trong m·∫°ng l∆∞·ªõi c√≥ th·ªÉ t·ª± m√¨nh ki·ªÉm tra v√† x√°c minh t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu. N·∫øu t√¥i v√† b·∫°n c√πng bƒÉm m·ªôt kh·ªëi v√† ra k·∫øt qu·∫£ gi·ªëng nhau, ch√∫ng ta bi·∫øt r·∫±ng ch√∫ng ta c√≥ c√πng m·ªôt d·ªØ li·ªáu.
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>ƒê·∫∑c t√≠nh V√ÄNG c·ªßa H√†m bƒÉm (2/3)</h2>
    <div class="slide-content">
        <h3>T√≠nh m·ªôt chi·ªÅu (One-Way / Pre-image Resistance)</h3>
        <ul>
            <li>R·∫•t d·ªÖ ƒë·ªÉ t√≠nh <code>Y = hash(X)</code>.</li>
            <li>Nh∆∞ng g·∫ßn nh∆∞ <strong>kh√¥ng th·ªÉ</strong> t√¨m ra <code>X</code> n·∫øu ch·ªâ bi·∫øt <code>Y</code>.</li>
        </ul>
        
        <div class="highlight-box" style="font-size: 1.3em; text-align: left; margin-top: 30px;">
            <strong>T·∫°i sao quan tr·ªçng?:</strong> Gi√∫p b·∫£o v·ªá d·ªØ li·ªáu. V√≠ d·ª•, Merkle Root t√≥m t·∫Øt h√†ng ng√†n giao d·ªãch, nh∆∞ng kh√¥ng ai c√≥ th·ªÉ t·ª´ Merkle Root m√† suy ng∆∞·ª£c ra ƒë∆∞·ª£c n·ªôi dung c·ªßa c√°c giao d·ªãch ƒë√≥.
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>ƒê·∫∑c t√≠nh V√ÄNG c·ªßa H√†m bƒÉm (3/3)</h2>
    <div class="slide-content">
        <h3>T√≠nh kh√°ng va ch·∫°m (Collision Resistance)</h3>
        <ul>
            <li>C·ª±c k·ª≥ kh√≥ ƒë·ªÉ t√¨m ra hai ƒë·∫ßu v√†o kh√°c nhau <code>X</code> v√† <code>Z</code> sao cho <code>hash(X) = hash(Z)</code>.</li>
            <li>V·ªõi SHA-256, x√°c su·∫•t n√†y nh·ªè h∆°n c·∫£ vi·ªác tr√∫ng s·ªë ƒë·ªôc ƒë·∫Øc nhi·ªÅu l·∫ßn li√™n ti·∫øp.</li>
        </ul>
        
        <div class="highlight-box" style="font-size: 1.3em; text-align: left; margin-top: 30px;">
            <strong>T·∫°i sao quan tr·ªçng?:</strong> ƒê·∫£m b·∫£o t√≠nh to√†n v·∫πn c·ªßa chu·ªói. N·∫øu c√≥ th·ªÉ t·∫°o ra va ch·∫°m, k·∫ª gian c√≥ th·ªÉ t·∫°o ra m·ªôt kh·ªëi gi·∫£ m·∫°o c√≥ c√πng hash v·ªõi kh·ªëi th·∫≠t ƒë·ªÉ l·ª´a ƒë·∫£o h·ªá th·ªëng.
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>·ª®ng d·ª•ng c·ªßa H√†m bƒÉm: T·∫°o ra "Chu·ªói"</h2>
    <div class="slide-content">
        <p>ƒê√¢y l√† c√°ch c√°c kh·ªëi ƒë∆∞·ª£c li√™n k·∫øt v·ªõi nhau m·ªôt c√°ch b·∫•t bi·∫øn.</p>
        
        <div class="code-block">
            // Ti√™u ƒë·ªÅ Kh·ªëi 100<br>
            <strong>Hash_100:</strong> 0000...abcd<br><br>
            // Ti√™u ƒë·ªÅ Kh·ªëi 101<br>
            <strong>Previous_Hash:</strong> 0000...abcd ‚Üê Li√™n k·∫øt t·ªõi Kh·ªëi 100<br>
            <strong>...</strong><br>
            <strong>Hash_101:</strong> 0000...efgh
        </div>
        
        <p>H√†m bƒÉm ch√≠nh l√† "ch·∫•t keo" m·∫≠t m√£ h·ªçc g·∫Øn k·∫øt to√†n b·ªô l·ªãch s·ª≠ c·ªßa Blockchain.</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Ph·∫ßn II: M·∫≠t m√£ Kh√≥a c√¥ng khai - Danh t√≠nh S·ªë c·ªßa b·∫°n</h2>
    <div class="slide-content">
        <p>H·ªá th·ªëng n√†y gi·∫£i quy·∫øt m·ªôt v·∫•n ƒë·ªÅ kinh ƒëi·ªÉn: L√†m sao ƒë·ªÉ <strong>giao ti·∫øp an to√†n</strong> v√† <strong>x√°c ƒë·ªãnh danh t√≠nh</strong> tr√™n m·ªôt m·∫°ng l∆∞·ªõi c√¥ng c·ªông v√† kh√¥ng tin c·∫≠y?</p>
        
        <p>N√≥ t·∫°o ra m·ªôt c·∫∑p kh√≥a c√≥ quan h·ªá to√°n h·ªçc v·ªõi nhau...</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>V√≠ von v·ªÅ H√≤m th∆∞ & Ch√¨a kh√≥a</h2>
    <div class="slide-content">
        <ul>
            <li><strong>Kh√≥a C√¥ng khai (Public Key):</strong> Gi·ªëng nh∆∞ <strong>ƒë·ªãa ch·ªâ h√≤m th∆∞</strong> c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ chia s·∫ª n√≥ cho b·∫•t k·ª≥ ai mu·ªën g·ª≠i th∆∞ (t√†i s·∫£n) cho b·∫°n.</li>
            <li><strong>Kh√≥a Ri√™ng t∆∞ (Private Key):</strong> Gi·ªëng nh∆∞ <strong>ch√¨a kh√≥a</strong> ƒë·ªÉ m·ªü h√≤m th∆∞. Ch·ªâ c√≥ b·∫°n gi·ªØ n√≥. Ai c√≥ ch√¨a kh√≥a n√†y, ng∆∞·ªùi ƒë√≥ c√≥ th·ªÉ l·∫•y m·ªçi th·ª© b√™n trong.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Tr√¥ng ch√∫ng nh∆∞ th·∫ø n√†o?</h2>
    <div class="slide-content">
        <p>ƒê√¢y kh√¥ng ph·∫£i l√† nh·ªØng kh√°i ni·ªám tr·ª´u t∆∞·ª£ng. Ch√∫ng l√† nh·ªØng ƒëo·∫°n d·ªØ li·ªáu c√≥ th·∫≠t.</p>
        
        <div class="code-block">
            // M·ªôt Kh√≥a Ri√™ng t∆∞ (d·∫°ng Hexadecimal, 256-bit)<br>
            <strong>Private Key:</strong><br>
            8e3c...b733<br><br>
            
            ‚Üì (Thu·∫≠t to√°n ECC) ‚Üì<br><br>
            
            // ƒê·ªãa ch·ªâ Ethereum t∆∞∆°ng ·ª©ng (t·∫°o t·ª´ Kh√≥a C√¥ng khai)<br>
            <strong>Address:</strong><br>
            0x71C7...A18e
        </div>
        
        <p>M·ªëi quan h·ªá n√†y l√† <strong>m·ªôt chi·ªÅu</strong>: c√≥ th·ªÉ t·ª´ kh√≥a ri√™ng t∆∞ t·∫°o ra ƒë·ªãa ch·ªâ, nh∆∞ng kh√¥ng th·ªÉ l√†m ng∆∞·ª£c l·∫°i.</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>C·∫£nh b√°o An ninh T·ªëi quan tr·ªçng! ‚ö†Ô∏è</h2>
    <div class="slide-content">
        <p>Trong th·∫ø gi·ªõi Blockchain, c√≥ m·ªôt c√¢u th·∫ßn ch√∫:</p>
        
        <div class="quote-block" style="background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%); color: #856404;">
            "Not Your Keys, Not Your Coins"<br>
            (Kh√¥ng ph·∫£i kh√≥a c·ªßa b·∫°n, kh√¥ng ph·∫£i ti·ªÅn c·ªßa b·∫°n)
        </div>
        
        <ul>
            <li>N·∫øu b·∫°n ƒë·ªÉ l·ªô kh√≥a ri√™ng t∆∞, b·∫°n <strong>m·∫•t t·∫•t c·∫£ t√†i s·∫£n</strong>. Kh√¥ng c√≥ t·ªïng ƒë√†i hay ng√¢n h√†ng n√†o ƒë·ªÉ g·ªçi h·ªó tr·ª£.</li>
            <li>N·∫øu b·∫°n l∆∞u kh√≥a tr√™n m·ªôt s√†n giao d·ªãch, v·ªÅ m·∫∑t k·ªπ thu·∫≠t, h·ªç m·ªõi l√† ng∆∞·ªùi ƒëang gi·ªØ t√†i s·∫£n c·ªßa b·∫°n.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Ph·∫ßn III: Ch·ªØ k√Ω s·ªë - D·∫•u ·∫•n Kh√¥ng th·ªÉ Ch·ªëi c√£i</h2>
    <div class="slide-content">
        <p>L√†m sao m·∫°ng l∆∞·ªõi bi·∫øt m·ªôt giao d·ªãch l√† h·ª£p l·ªá v√† th·ª±c s·ª± ƒë·∫øn t·ª´ b·∫°n?</p>
        
        <p>Ch·ªØ k√Ω s·ªë cung c·∫•p hai b·∫±ng ch·ª©ng s·∫Øt ƒë√°:</p>
        <ul>
            <li><strong>T√≠nh x√°c th·ª±c (Authenticity):</strong> Giao d·ªãch ƒë∆∞·ª£c t·∫°o b·ªüi ch·ªß nh√¢n c·ªßa kh√≥a ri√™ng t∆∞.</li>
            <li><strong>T√≠nh to√†n v·∫πn (Integrity):</strong> Giao d·ªãch kh√¥ng h·ªÅ b·ªã ch·ªânh s·ª≠a.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Quy tr√¨nh K√Ω m·ªôt Giao d·ªãch</h2>
    <div class="slide-content">
        <p style="margin-bottom: 15px;">C√°c b∆∞·ªõc m√† Alice s·∫Ω th·ª±c hi·ªán ƒë·ªÉ g·ª≠i g√≥i tin cho Bob: T·∫°o <strong>Tx</strong> ‚Üí <strong>Hash(Tx)</strong> ‚Üí K√Ω b·∫±ng <strong>Private Key</strong> ‚Üí ƒê√≥ng g√≥i &amp; truy·ªÅn ƒëi</p>
        
        <div style="display: flex; gap: 8px; margin: 10px 0; align-items: center;">
            <button id="crypto-play" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 10px 20px; border-radius: 12px; cursor: pointer; font-size: 14px; font-weight: bold;">
                ‚ñ∂Ô∏è Ch·∫°y
            </button>
            <button id="crypto-reset" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 12px; cursor: pointer; font-size: 14px; font-weight: bold;" disabled>
                ‚ü≤ Reset
            </button>
            <span id="crypto-status" style="color: #666; font-size: 13px; margin-left: 10px;">S·∫µn s√†ng.</span>
        </div>

        <div style="display: grid; grid-template-columns: 1.2fr 1fr 1.2fr; gap: 16px; margin: 20px 0;">
            <!-- Step 1: Transaction Data -->
            <div id="tx-card" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; min-height: 180px; position: relative; transition: all 0.3s ease;">
                <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                    B∆∞·ªõc 1 ¬∑ D·ªØ li·ªáu giao d·ªãch g·ªëc
                </div>
                <div style="position: absolute; top: 12px; right: 12px; font-size: 11px; padding: 4px 8px; border-radius: 20px; background: #007bff; color: white; font-weight: bold;">
                    Tx
                </div>
                <pre id="tx-content" style="margin: 0; white-space: pre-wrap; word-break: break-word; font-size: 12px; line-height: 1.4; background: #ffffff; border: 1px solid #dee2e6; padding: 12px; border-radius: 8px; color: #495057; min-height: 120px; overflow: auto;">
<code>// Ch∆∞a kh·ªüi t·∫°o‚Ä¶</code></pre>
            </div>

            <!-- Step 2: Hashing Machine -->
            <div id="hash-card" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; min-height: 180px; transition: all 0.3s ease;">
                <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                    B∆∞·ªõc 2 ¬∑ BƒÉm d·ªØ li·ªáu (SHA-256)
                </div>
                
                <!-- Hashing Machine -->
                <div id="hash-machine" style="height: 50px; border: 2px dashed #6c757d; border-radius: 8px; display: flex; align-items: center; justify-content: center; gap: 6px; margin-bottom: 12px;">
                    <div style="width: 12px; height: 12px; border: 2px solid #007bff; border-radius: 50%; border-top-color: transparent; animation: spin 1s linear infinite;"></div>
                    <div style="width: 12px; height: 12px; border: 2px solid #28a745; border-radius: 50%; border-top-color: transparent; animation: spin 1.5s linear infinite;"></div>
                    <span id="machine-status" style="color: #6c757d; font-size: 12px;">M√°y bƒÉm ƒëang ch·ªù‚Ä¶</span>
                </div>
                
                <!-- Hash Result -->
                <div style="background: #e3f2fd; border-radius: 8px; padding: 12px;">
                    <div style="font-size: 11px; color: #1976d2; font-weight: bold; margin-bottom: 6px;">Hash(Tx)</div>
                    <pre id="hash-content" style="margin: 0; font-size: 11px; line-height: 1.3; color: #333; word-break: break-all;">
<code>// ‚Ä¶</code></pre>
                </div>
            </div>

            <!-- Step 3: Digital Signature -->
            <div id="sig-card" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; min-height: 180px; position: relative; transition: all 0.3s ease;">
                <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                    B∆∞·ªõc 3 ¬∑ K√Ω b·∫±ng Private Key (ECDSA P-256)
                </div>
                <div style="position: absolute; top: 12px; right: 12px; font-size: 11px; padding: 4px 8px; border-radius: 20px; background: #ffc107; color: #212529; font-weight: bold;">
                    Signature
                </div>
                <pre id="sig-content" style="margin: 0; white-space: pre-wrap; word-break: break-word; font-size: 11px; line-height: 1.3; background: #ffffff; border: 1px solid #dee2e6; padding: 10px; border-radius: 8px; color: #495057; height: 60px; overflow: auto;">
<code>// ‚Ä¶</code></pre>
                <div style="margin-top: 8px;">
                    <div style="font-size: 11px; color: #6c757d; font-weight: bold; margin-bottom: 4px;">Public Key c·ªßa Alice</div>
                    <pre id="pub-content" style="margin: 0; font-size: 10px; line-height: 1.2; background: #f8f9fa; border: 1px solid #dee2e6; padding: 8px; border-radius: 6px; color: #495057; height: 50px; overflow: auto;">
<code>// ‚Ä¶</code></pre>
                </div>
            </div>
        </div>

        <!-- Step 4: Final Package -->
        <div id="package-card" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; margin: 16px 0; transition: all 0.3s ease;">
            <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                B∆∞·ªõc 4 ¬∑ G√≥i tin ho√†n ch·ªânh g·ª≠i ƒëi
            </div>
            <div style="display: flex; gap: 16px; align-items: center;">
                <div style="flex: 1;">
                    <!-- Single button that starts disabled and gets enabled after completion -->
                    <div style="background: #ffffff; border: 1px solid #dee2e6; padding: 20px; border-radius: 8px; text-align: center;">
                        <button id="view-result-btn" style="background: #e9ecef; color: #6c757d; border: 2px solid #ced4da; border-radius: 12px; padding: 15px 30px; font-size: 16px; font-weight: bold; cursor: not-allowed; transition: all 0.3s ease; opacity: 0.6;" disabled>
                            üì¶ Xem k·∫øt qu·∫£
                        </button>
                        <div id="package-status" style="margin-top: 10px; color: #6c757d; font-style: italic; font-size: 14px;">
                            üïê Ch·ªù ho√†n th√†nh c√°c b∆∞·ªõc tr∆∞·ªõc...
                        </div>
                    </div>
                </div>
                
                <!-- Network Animation -->
                <div style="width: 300px; height: 80px;">
                    <svg viewBox="0 0 300 80" style="width: 100%; height: 100%;">
                        <defs>
                            <marker id="arrow-marker" viewBox="0 0 10 10" refX="10" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
                                <path d="M 0 0 L 10 5 L 0 10 z" fill="#6c757d"></path>
                            </marker>
                        </defs>
                        <path id="network-route" d="M20 40 C 80 20, 150 60, 220 30 S 280 50, 280 40" fill="none" stroke="#6c757d" stroke-width="2" stroke-dasharray="4 4" marker-end="url(#arrow-marker)"/>
                        <circle cx="20" cy="40" r="12" fill="#007bff" stroke="#0056b3" stroke-width="2"/>
                        <circle cx="100" cy="30" r="8" fill="#6c757d" stroke="#495057" stroke-width="1"/>
                        <circle cx="180" cy="50" r="8" fill="#6c757d" stroke="#495057" stroke-width="1"/>
                        <circle cx="280" cy="40" r="12" fill="#28a745" stroke="#1e7e34" stroke-width="2"/>
                        <circle id="data-packet" r="6" fill="#ffc107" cx="20" cy="40"/>
                        <text x="5" y="60" style="font-size: 10px; fill: #495057;">Alice</text>
                        <text x="265" y="60" style="font-size: 10px; fill: #495057;">Bob</text>
                    </svg>
                </div>
            </div>
        </div>

        <!-- Modal for Package Details -->
        <div id="package-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 1000; backdrop-filter: blur(5px);">
            <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 16px; padding: 24px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 60px rgba(0,0,0,0.3);">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px; border-bottom: 2px solid #e9ecef; padding-bottom: 12px;">
                    <h3 style="margin: 0; color: #2e7d32; font-size: 18px;">üì¶ Chi ti·∫øt G√≥i tin Ho√†n ch·ªânh</h3>
                    <div style="display: flex; gap: 8px;">
                        <button id="copy-package-btn" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; border: none; border-radius: 8px; padding: 8px 12px; cursor: pointer; font-size: 14px; font-weight: bold;">Copy Package</button>
                        <button id="close-modal" style="background: #dc3545; color: white; border: none; border-radius: 8px; padding: 8px 12px; cursor: pointer; font-size: 14px; font-weight: bold;">‚úï ƒê√≥ng</button>
                    </div>
                </div>
                
                <div style="background: #f8f9fa; border-radius: 12px; padding: 16px; margin-bottom: 16px;">
                    <h4 style="margin: 0 0 12px 0; color: #495057; font-size: 14px;">üîç C·∫•u tr√∫c G√≥i tin:</h4>
                    <pre id="modal-package-content" style="margin: 0; font-size: 12px; line-height: 1.4; background: white; border: 1px solid #dee2e6; padding: 16px; border-radius: 8px; color: #495057; overflow-x: auto;">
<code>// ƒêang t·∫£i...</code></pre>
                </div>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 12px;">
                    <div style="background: #e3f2fd; border-radius: 8px; padding: 12px; border-left: 4px solid #2196f3;">
                        <div style="font-weight: bold; color: #1976d2; font-size: 12px; margin-bottom: 4px;">üìÑ Transaction Data</div>
                        <div style="color: #0d47a1; font-size: 11px;">D·ªØ li·ªáu giao d·ªãch g·ªëc (From, To, Amount)</div>
                    </div>
                    <div style="background: #f3e5f5; border-radius: 8px; padding: 12px; border-left: 4px solid #9c27b0;">
                        <div style="font-weight: bold; color: #7b1fa2; font-size: 12px; margin-bottom: 4px;">üîë Public Key</div>
                        <div style="color: #4a148c; font-size: 11px;">Kh√≥a c√¥ng khai c·ªßa Alice (ƒë·ªÉ x√°c minh)</div>
                    </div>
                    <div style="background: #e8f5e8; border-radius: 8px; padding: 12px; border-left: 4px solid #4caf50;">
                        <div style="font-weight: bold; color: #2e7d32; font-size: 12px; margin-bottom: 4px;">‚ú® Digital Signature</div>
                        <div style="color: #1b5e20; font-size: 11px;">Ch·ªØ k√Ω s·ªë (b·∫±ng ch·ª©ng x√°c th·ª±c)</div>
                    </div>
                </div>
            </div>
        </div>

        <style>
            @keyframes spin { to { transform: rotate(360deg); } }
            .highlight-card { border-color: #007bff !important; box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25) !important; }
        </style>
    </div>
</div>
`);

// ============ VERIFIER SLIDE ============
addSlide(`
<div class="slide">
    <h2>Quy tr√¨nh X√°c minh Ch·ªØ k√Ω s·ªë</h2>
    <div class="slide-content">
        <p>Sau khi Alice k√Ω giao d·ªãch, b√¢y gi·ªù Bob (ho·∫∑c b·∫•t k·ª≥ ai) c√≥ th·ªÉ <strong>x√°c minh</strong> t√≠nh h·ª£p l·ªá c·ªßa g√≥i tin:</p>
        
        <!-- ========== VERIFIER VIEW ========== -->
        <section id="viewVerify" class="view">
            <p class="small">Node s·∫Ω x·ª≠ l√Ω g√≥i <code>[Tx, AlicePublicKey, Signature]</code> t·ª´ Signer ƒë·ªÉ x√°c minh v√† g·ª≠i l√™n m·∫°ng Blockchain.</p>
            
            <div style="display: flex; gap: 12px; margin-bottom: 16px; flex-wrap: wrap;">
                <button id="loadFromStorage" style="background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; border: none; padding: 10px 16px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: bold;">
                    üì• Load t·ª´ b·ªô nh·ªõ
                </button>
                <button id="verifyRun" style="background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%); color: white; border: none; padding: 10px 16px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: bold;">
                    ‚úî Verify
                </button>
                <button id="verifyReset" style="background: #6c757d; color: white; border: none; padding: 10px 16px; border-radius: 8px; cursor: pointer; font-size: 14px; font-weight: bold;" disabled>
                    ‚ü≤ Reset
                </button>
                <span style="margin-left: auto; color: #6c757d; font-size: 14px; align-self: center;" id="statusV">Idle.</span>
            </div>

            <!-- Input Package -->
            <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; margin-bottom: 16px;">
                <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                    G√≥i tin ƒë·∫ßu v√†o cho Verifier
                </div>
                <textarea id="pkgInput" style="width: 100%; height: 80px; padding: 12px; border: 1px solid #ced4da; border-radius: 8px; font-family: 'Courier New', monospace; font-size: 12px; resize: vertical; box-sizing: border-box;" placeholder='D√°n JSON package ·ªü ƒë√¢y (t·ª´ slide tr∆∞·ªõc)‚Ä¶'></textarea>
            </div>

            <!-- Verification Steps Grid -->
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 16px;">
                <!-- Step 1: Split Package -->
                <div id="v1" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; transition: all 0.3s ease;">
                    <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                        B∆∞·ªõc 1 ¬∑ T√°ch g√≥i tin
                    </div>
                    <pre id="vSplit" style="margin: 0; font-size: 11px; line-height: 1.3; background: #ffffff; border: 1px solid #dee2e6; padding: 12px; border-radius: 8px; color: #495057; height: 120px; overflow: auto;"><code>// ‚Ä¶</code></pre>
                </div>

                <!-- Step 2: Hash Transaction -->
                <div id="v2" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; transition: all 0.3s ease;">
                    <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                        B∆∞·ªõc 2 ¬∑ Hash(Tx) l·∫°i
                    </div>
                    <div style="text-align: center; margin-bottom: 8px;">
                        <div id="machine-status-v" style="font-size: 10px; color: #28a745; font-weight: bold;">M√°y bƒÉm ƒëang ch·ªù‚Ä¶</div>
                    </div>
                    <pre id="vHash" style="margin: 0; font-size: 11px; line-height: 1.3; background: #ffffff; border: 1px solid #dee2e6; padding: 12px; border-radius: 8px; color: #495057; height: 80px; overflow: auto;"><code>// ‚Ä¶</code></pre>
                </div>

                <!-- Step 3: Verify Signature -->
                <div id="v3" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; transition: all 0.3s ease;">
                    <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                        B∆∞·ªõc 3 ¬∑ Verify Signature
                    </div>
                    <pre id="vVerify" style="margin: 0; font-size: 11px; line-height: 1.3; background: #ffffff; border: 1px solid #dee2e6; padding: 12px; border-radius: 8px; color: #495057; height: 120px; overflow: auto;"><code>// ‚Ä¶</code></pre>
                </div>

                <!-- Step 4: Compare Results -->
                <div id="v4" style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 12px; padding: 16px; transition: all 0.3s ease;">
                    <div style="font-size: 12px; color: #6c757d; letter-spacing: 0.5px; margin-bottom: 8px; text-transform: uppercase; font-weight: bold;">
                        B∆∞·ªõc 4 ¬∑ So s√°nh A ‚âü B
                    </div>
                    <pre id="vCompare" style="margin: 0; font-size: 11px; line-height: 1.3; background: #ffffff; border: 1px solid #dee2e6; padding: 12px; border-radius: 8px; color: #495057; height: 100px; overflow: auto;"><code>// ‚Ä¶</code></pre>
                </div>
            </div>
        </section>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>B·∫£ng so s√°nh: BƒÉm vs. M√£ h√≥a vs. K√Ω s·ªë</h2>
    <div class="slide-content">
        <table style="width: 100%; border-collapse: collapse; margin: 20px 0;">
            <thead>
                <tr style="background-color: #f8f9fa;">
                    <th style="border: 1px solid #ddd; padding: 12px; text-align: left;">Ch·ª©c nƒÉng</th>
                    <th style="border: 1px solid #ddd; padding: 12px; text-align: center;">M·ª•c ƒë√≠ch</th>
                    <th style="border: 1px solid #ddd; padding: 12px; text-align: center;">Kh√≥a s·ª≠ d·ª•ng</th>
                    <th style="border: 1px solid #ddd; padding: 12px; text-align: center;">K·∫øt qu·∫£</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="border: 1px solid #ddd; padding: 12px;"><strong>BƒÉm (Hashing)</strong></td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">Ki·ªÉm tra t√≠nh to√†n v·∫πn</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">Kh√¥ng d√πng kh√≥a</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">"V√¢n tay s·ªë"</td>
                </tr>
                <tr style="background-color: #f8f9fa;">
                    <td style="border: 1px solid #ddd; padding: 12px;"><strong>M√£ h√≥a (Encryption)</strong></td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">B·∫£o v·ªá t√≠nh b√≠ m·∫≠t</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">Kh√≥a c√¥ng khai</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">D·ªØ li·ªáu b·ªã x√°o tr·ªôn</td>
                </tr>
                <tr>
                    <td style="border: 1px solid #ddd; padding: 12px;"><strong>K√Ω s·ªë (Signing)</strong></td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">X√°c th·ª±c & Ch·ªëng ch·ªëi b·ªè</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">Kh√≥a ri√™ng t∆∞</td>
                    <td style="border: 1px solid #ddd; padding: 12px; text-align: center;">"Ch·ªØ k√Ω"</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Ph·∫ßn IV: C√¢y Merkle - T·ªëi ∆∞u h√≥a Hi·ªáu su·∫•t</h2>
    <div class="slide-content">
        <p>M·ªôt kh·ªëi c√≥ th·ªÉ ch·ª©a h√†ng ng√†n giao d·ªãch. L√†m sao m·ªôt v√≠ ƒëi·ªán tho·∫°i (light client) c√≥ th·ªÉ x√°c minh giao d·ªãch c·ªßa m√¨nh m√† kh√¥ng c·∫ßn t·∫£i v·ªÅ c·∫£ kh·ªëi (h√†ng Megabyte d·ªØ li·ªáu)?</p>
        
        <p>C√¢y Merkle cho ph√©p t√≥m t·∫Øt to√†n b·ªô giao d·ªãch trong kh·ªëi th√†nh m·ªôt chu·ªói hash duy nh·∫•t.</p>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>X√¢y d·ª±ng C√¢y Merkle - Animation</h2>
    <div class="slide-content">
        <p>Qu√° tr√¨nh n√†y di·ªÖn ra t·ª´ d∆∞·ªõi l√™n tr√™n, b·∫±ng c√°ch bƒÉm li√™n t·ª•c c√°c c·∫∑p hash.</p>
        
        <div style="display: flex; gap: 12px; margin-bottom: 16px;">
            <button id="merkle-play" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 10px 20px; border-radius: 12px; cursor: pointer; font-size: 14px; font-weight: bold;">
                ‚ñ∂ X√¢y d·ª±ng C√¢y
            </button>
            <button id="merkle-reset" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 12px; cursor: pointer; font-size: 14px; font-weight: bold;" disabled>
                ‚ü≤ Reset
            </button>
            <span style="margin-left: auto; color: #6c757d; font-size: 14px; align-self: center;" id="merkle-status">S·∫µn s√†ng x√¢y d·ª±ng c√¢y.</span>
        </div>

        <div style="width: 100%; height: 345px; background: #0f1220; border: 2px solid #23284b; border-radius: 16px; position: relative; display: flex; align-items: center; justify-content: center;">
            <svg id="merkle-svg" viewBox="0 0 640 350" style="width: 100%; height: 100%;">
                <defs>
                    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
                        <feGaussianBlur stdDeviation="4" result="b"/>
                        <feMerge><feMergeNode in="b"/><feMergeNode in="SourceGraphic"/></feMerge>
                    </filter>
                </defs>
            </svg>
        </div>
        
        <div style="margin-top: 16px; background: #f8f9fa; border-radius: 12px; padding: 16px;">
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; font-size: 12px;">
                <div style="text-align: center;">
                    <div style="width: 20px; height: 20px; background: #ef4444; border-radius: 50%; margin: 0 auto 4px; border: 2px solid #dc2626;"></div>
                    <div><strong>L√° (Leaves)</strong><br>D·ªØ li·ªáu g·ªëc</div>
                </div>
                <div style="text-align: center;">
                    <div style="width: 20px; height: 20px; background: #60a5fa; border-radius: 50%; margin: 0 auto 4px; border: 2px solid #3b82f6;"></div>
                    <div><strong>N√∫t trung gian</strong><br>Hash c·ªßa c·∫∑p con</div>
                </div>
                <div style="text-align: center;">
                    <div style="width: 20px; height: 20px; background: #f59e0b; border-radius: 50%; margin: 0 auto 4px; border: 2px solid #d97706;"></div>
                    <div><strong>Merkle Root</strong><br>Hash g·ªëc</div>
                </div>
            </div>
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>S·ª©c m·∫°nh c·ªßa B·∫±ng ch·ª©ng Merkle (Merkle Proof)</h2>
    <div class="slide-content">
        <p>ƒê·ªÉ ch·ª©ng minh <strong>Giao d·ªãch A (t·∫°o ra HA)</strong> c√≥ trong kh·ªëi, b·∫°n kh√¥ng c·∫ßn c·∫£ c√¢y. B·∫°n ch·ªâ c·∫ßn:</p>
        <ul>
            <li><strong>HB</strong> (ƒë·ªÉ t√≠nh H_AB)</li>
            <li><strong>H_CD</strong> (ƒë·ªÉ t√≠nh H_ABCD)</li>
            <li><strong>Merkle Root</strong> (ƒë·ªÉ so s√°nh k·∫øt qu·∫£ cu·ªëi c√πng)</li>
        </ul>
        
        <div class="highlight-box" style="font-size: 1.3em; text-align: left; margin-top: 30px;">
            ‚Üí M·ªôt l∆∞·ª£ng d·ªØ li·ªáu c·ª±c nh·ªè ƒë·ªÉ x√°c minh, gi√∫p c√°c thi·∫øt b·ªã y·∫øu c√≥ th·ªÉ t∆∞∆°ng t√°c an to√†n v·ªõi Blockchain.
        </div>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>T·ªïng h·ª£p: V√≤ng ƒë·ªùi c·ªßa m·ªôt Giao d·ªãch</h2>
    <div class="slide-content">
        <p style="font-size: 1.8em;">H√£y xem c·∫£ 4 th√†nh ph·∫ßn ho·∫°t ƒë·ªông c√πng nhau nh∆∞ th·∫ø n√†o:</p>
        <ul style="font-size: 1em; line-height: 1.8;">
            <li>Alice d√πng <strong>Kh√≥a Ri√™ng t∆∞</strong> ƒë·ªÉ t·∫°o <strong>Ch·ªØ k√Ω s·ªë</strong> cho giao d·ªãch.</li>
            <li>Giao d·ªãch ƒë∆∞·ª£c ƒë∆∞a v√†o m·ªôt kh·ªëi c√πng h√†ng ng√†n giao d·ªãch kh√°c.</li>
            <li>T·∫•t c·∫£ ƒë∆∞·ª£c <strong>BƒÉm</strong> v√† s·∫Øp x·∫øp v√†o m·ªôt <strong>C√¢y Merkle</strong> ƒë·ªÉ t·∫°o ra Merkle Root.</li>
            <li>Kh·ªëi ƒë∆∞·ª£c li√™n k·∫øt v√†o chu·ªói b·∫±ng c√°ch ƒë∆∞a <strong>Hash</strong> c·ªßa kh·ªëi tr∆∞·ªõc v√†o ti√™u ƒë·ªÅ.</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>T√≥m t·∫Øt Bu·ªïi 2</h2>
    <div class="slide-content">
        <p>H√¥m nay ch√∫ng ta ƒë√£ gi·∫£i m√£ ƒë∆∞·ª£c 4 "ph√©p thu·∫≠t" to√°n h·ªçc ƒë·∫±ng sau Blockchain. Ch√∫ng l√† n·ªÅn t·∫£ng cho s·ª± an to√†n v√† tin c·∫≠y c·ªßa to√†n b·ªô h·ªá th·ªëng.</p>
        
        <ul>
            <li><strong>H√†m bƒÉm m·∫≠t m√£</strong> t·∫°o ra "v√¢n tay s·ªë" v√† li√™n k·∫øt c√°c kh·ªëi</li>
            <li><strong>M·∫≠t m√£ kh√≥a c√¥ng khai</strong> t·∫°o ra danh t√≠nh v√† quy·ªÅn s·ªü h·ªØu</li>
            <li><strong>Ch·ªØ k√Ω s·ªë</strong> x√°c th·ª±c giao d·ªãch kh√¥ng c·∫ßn trung gian</li>
            <li><strong>C√¢y Merkle</strong> t·ªëi ∆∞u h√≥a vi·ªác x√°c minh d·ªØ li·ªáu</li>
        </ul>
    </div>
</div>
`);

addSlide(`
<div class="slide">
    <h2>Bu·ªïi h·ªçc ti·∫øp theo...</h2>
    <div class="slide-content">
        <h3>Bu·ªïi 3: Bitcoin v√† Cryptocurrency</h3>
        <p>C√¢u h·ªèi ti·∫øp theo: "L√†m th·∫ø n√†o Bitcoin √°p d·ª•ng t·∫•t c·∫£ nh·ªØng nguy√™n l√Ω m·∫≠t m√£ h·ªçc n√†y ƒë·ªÉ t·∫°o ra h·ªá th·ªëng ti·ªÅn t·ªá ƒë·∫ßu ti√™n ho√†n to√†n phi t·∫≠p trung?"</p>
        
        <ul>
            <li>Ki·∫øn tr√∫c v√† c∆° ch·∫ø ho·∫°t ƒë·ªông c·ªßa Bitcoin</li>
            <li>Qu√° tr√¨nh mining v√† Proof of Work</li>
            <li>C√°ch giao d·ªãch Bitcoin ƒë∆∞·ª£c x·ª≠ l√Ω</li>
        </ul>
        
        <div class="highlight-box" style="margin-top: 30px; font-size: 2.5em;">
            <h4 style="color: #0077B6;">C√¢u h·ªèi & Th·∫£o lu·∫≠n?</h4>
        </div>
    </div>
</div>
`);

// Initialize the slideshow after loading all slides
// Note: initializeSlideshow() is called from index.html, not here

// WebCrypto Animation for Digital Signing
function initializeCryptoAnimation() {
    setTimeout(() => {
        const playBtn = document.getElementById('crypto-play');
        const resetBtn = document.getElementById('crypto-reset');
        const statusEl = document.getElementById('crypto-status');
        
        if (!playBtn || !resetBtn || !statusEl) {
            console.log('‚è≥ Crypto animation elements not found, will retry...');
            return;
        }
        
        console.log('‚úÖ Crypto animation elements found, initializing...');
        
        let busy = false, keys;
        
        // Helper functions
        const sleep = (ms) => new Promise(r => setTimeout(r, ms));
        const enc = (s) => new TextEncoder().encode(s);
        const toHex = (buf) => [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join('');
        const b64url = (buf) => {
            let b64 = btoa(String.fromCharCode(...new Uint8Array(buf)));
            return b64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
        };
        const json = (obj) => JSON.stringify(obj, null, 2);
        
        // Deterministic string for hashing
        function stableStringify(obj) {
            if (obj === null || typeof obj !== 'object') return JSON.stringify(obj);
            if (Array.isArray(obj)) return '[' + obj.map(stableStringify).join(',') + ']';
            return '{' + Object.keys(obj).sort().map(k => JSON.stringify(k) + ':' + stableStringify(obj[k])).join(',') + '}';
        }
        
        async function sha256(str) {
            const buf = await crypto.subtle.digest('SHA-256', enc(str));
            return buf;
        }
        
        async function genEcdsa() {
            return await crypto.subtle.generateKey({name: 'ECDSA', namedCurve: 'P-256'}, true, ['sign', 'verify']);
        }
        
        async function sign(hashBuf, privKey) {
            return await crypto.subtle.sign({name: 'ECDSA', hash: 'SHA-256'}, privKey, hashBuf);
        }
        
        async function exportPubJwk(pub) {
            const jwk = await crypto.subtle.exportKey('jwk', pub);
            return jwk;
        }
        
        function highlightCard(cardId) {
            document.getElementById(cardId).classList.add('highlight-card');
            document.getElementById(cardId).scrollIntoView({behavior: 'smooth', block: 'center'});
        }
        
        function clearHighlight(cardId) {
            document.getElementById(cardId).classList.remove('highlight-card');
        }
        
        async function run() {
            if (busy) return;
            busy = true;
            playBtn.disabled = true;
            resetBtn.disabled = true;
            statusEl.textContent = 'ƒêang ch·∫°y‚Ä¶';
            
            try {
                // STEP 1: Build Transaction
                const tx = { From: 'Alice', To: 'Bob', Amount: '1 ETH', Nonce: 1 };
                document.getElementById('tx-content').textContent = json(tx);
                highlightCard('tx-card');
                await sleep(1200);
                
                // STEP 2: Hash Transaction
                clearHighlight('tx-card');
                highlightCard('hash-card');
                document.getElementById('machine-status').textContent = 'ƒêang bƒÉm v·ªõi SHA-256‚Ä¶';
                await sleep(800);
                
                const txDet = stableStringify(tx);
                const hashBuf = await sha256(txDet);
                const hashHex = toHex(hashBuf).slice(0, 64) + '‚Ä¶';
                document.getElementById('hash-content').textContent = 'Hash(Tx) = ' + hashHex;
                await sleep(1000);
                
                // STEP 3: Generate keys + sign
                clearHighlight('hash-card');
                highlightCard('sig-card');
                keys = await genEcdsa();
                const sig = await sign(hashBuf, keys.privateKey);
                document.getElementById('sig-content').textContent = 'Signature = 0x' + toHex(sig).slice(0, 96) + '‚Ä¶';
                
                const jwk = await exportPubJwk(keys.publicKey);
                document.getElementById('pub-content').textContent = json(jwk);
                await sleep(1200);
                
                // STEP 4: Package and enable result button
                clearHighlight('sig-card');
                highlightCard('package-card');
                const pkg = { tx, alicePublicKey: jwk, signature: b64url(sig) };
                
                // Enable the result button
                const resultBtn = document.getElementById('view-result-btn');
                const statusText = document.getElementById('package-status');
                
                if (resultBtn && statusText) {
                    // Enable button with nice green styling
                    resultBtn.disabled = false;
                    resultBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                    resultBtn.style.color = 'white';
                    resultBtn.style.border = '2px solid #28a745';
                    resultBtn.style.cursor = 'pointer';
                    resultBtn.style.opacity = '1';
                    resultBtn.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.3)';
                    
                    // Update status text
                    statusText.innerHTML = '<span style="color: #28a745; font-weight: bold;">L·∫•y k·∫øt qu·∫£ ƒë·ªÉ x√°c minh t·∫°i slide sau!</span>';
                    
                    // Store package data for modal
                    window.cryptoPackageData = pkg;
                    
                    // Add click event for modal
                    resultBtn.onclick = function() {
                        showPackageModal(pkg);
                    };
                    
                    console.log('‚úÖ Result button is now enabled and clickable');
                } else {
                    console.error('‚ùå Could not find result button');
                }
                
                await sleep(800);
                
                // Animate packet along the network path
                const path = document.getElementById('network-route');
                const packet = document.getElementById('data-packet');
                if (path && packet) {
                    const len = path.getTotalLength();
                    let t = 0;
                    const dur = 2500;
                    const t0 = performance.now();
                    
                    function step(now) {
                        t = Math.min(1, (now - t0) / dur);
                        const p = path.getPointAtLength(t * len);
                        packet.setAttribute('cx', p.x);
                        packet.setAttribute('cy', p.y);
                        if (t < 1) requestAnimationFrame(step);
                        else done();
                    }
                    requestAnimationFrame(step);
                } else {
                    done();
                }
                
                function done() {
                    statusEl.textContent = 'Xong ‚úÖ G√≥i tin ƒë√£ ƒë·∫øn Bob! Click v√†o √¥ xanh ƒë·ªÉ xem chi ti·∫øt.';
                    playBtn.disabled = true;
                    resetBtn.disabled = false;
                    busy = false;
                    clearHighlight('package-card');
                    
                    // Pulse Bob node
                    const bobNode = document.querySelector('circle[fill="#28a745"]');
                    if (bobNode) {
                        bobNode.animate([
                            {transform: 'scale(1)'},
                            {transform: 'scale(1.3)'},
                            {transform: 'scale(1)'}
                        ], {duration: 800, iterations: 3});
                    }
                }
                
            } catch (error) {
                console.error('Animation error:', error);
                statusEl.textContent = 'L·ªói: ' + error.message;
                busy = false;
                playBtn.disabled = false;
                resetBtn.disabled = false;
            }
        }
        
        function showPackageModal(pkg) {
            const modal = document.getElementById('package-modal');
            const modalContent = document.getElementById('modal-package-content');
            
            if (modal && modalContent) {
                modalContent.textContent = json(pkg);
                modal.style.display = 'block';
                
                // Add modal close functionality
                const closeBtn = document.getElementById('close-modal');
                if (closeBtn) {
                    closeBtn.onclick = function() {
                        modal.style.display = 'none';
                    };
                }
                
                // Add copy package functionality
                const copyBtn = document.getElementById('copy-package-btn');
                if (copyBtn) {
                    copyBtn.onclick = async function() {
                        try {
                            const packageText = json(pkg);
                            await navigator.clipboard.writeText(packageText);
                            
                            // Visual feedback
                            const originalText = copyBtn.innerHTML;
                            copyBtn.innerHTML = '‚úÖ ƒê√£ Copy!';
                            copyBtn.style.background = '#28a745';
                            
                            setTimeout(() => {
                                copyBtn.innerHTML = originalText;
                                copyBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                            }, 2000);
                            
                        } catch (error) {
                            console.error('Copy failed:', error);
                            const originalText = copyBtn.innerHTML;
                            copyBtn.innerHTML = '‚ùå L·ªói Copy';
                            copyBtn.style.background = '#dc3545';
                            
                            setTimeout(() => {
                                copyBtn.innerHTML = originalText;
                                copyBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                            }, 2000);
                        }
                    };
                }
                
                // Close on background click
                modal.onclick = function(e) {
                    if (e.target === modal) {
                        modal.style.display = 'none';
                    }
                };
                
                // Close on Escape key
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape' && modal.style.display === 'block') {
                        modal.style.display = 'none';
                    }
                });
            }
        }
        
        function resetAll() {
            document.getElementById('tx-content').textContent = '// Ch∆∞a kh·ªüi t·∫°o‚Ä¶';
            document.getElementById('hash-content').textContent = '// ‚Ä¶';
            document.getElementById('sig-content').textContent = '// ‚Ä¶';
            document.getElementById('pub-content').textContent = '// ‚Ä¶';
            document.getElementById('machine-status').textContent = 'M√°y bƒÉm ƒëang ch·ªù‚Ä¶';
            statusEl.textContent = 'S·∫µn s√†ng.';
            
            // Reset package button to disabled state
            const resultBtn = document.getElementById('view-result-btn');
            const statusText = document.getElementById('package-status');
            
            if (resultBtn && statusText) {
                // Reset button to disabled state
                resultBtn.disabled = true;
                resultBtn.style.background = '#e9ecef';
                resultBtn.style.color = '#6c757d';
                resultBtn.style.border = '2px solid #ced4da';
                resultBtn.style.cursor = 'not-allowed';
                resultBtn.style.opacity = '0.6';
                resultBtn.style.boxShadow = 'none';
                
                // Reset status text
                statusText.innerHTML = 'üïê Ch·ªù ho√†n th√†nh c√°c b∆∞·ªõc tr∆∞·ªõc...';
                statusText.style.color = '#6c757d';
                
                // Remove click handler
                resultBtn.onclick = null;
            }
            
            // Hide modal if open
            const modal = document.getElementById('package-modal');
            if (modal) {
                modal.style.display = 'none';
            }
            
            ['tx-card', 'hash-card', 'sig-card', 'package-card'].forEach(clearHighlight);
            
            const packet = document.getElementById('data-packet');
            if (packet) {
                packet.setAttribute('cx', 20);
                packet.setAttribute('cy', 40);
            }
            
            playBtn.disabled = false;
            resetBtn.disabled = true;
            busy = false;
            
            // Clear package data
            if (window.cryptoPackageData) {
                delete window.cryptoPackageData;
            }
        }
        
        playBtn.addEventListener('click', run);
        resetBtn.addEventListener('click', resetAll);
        
        console.log('‚úÖ Crypto animation initialized successfully');
        
    }, 500);
}

// Initialize crypto animation
initializeCryptoAnimation();

// Also initialize when DOM is ready
document.addEventListener('DOMContentLoaded', initializeCryptoAnimation);

// Re-initialize when slides change
document.addEventListener('slideChange', initializeCryptoAnimation);

// Check periodically for the animation elements
const cryptoChecker = setInterval(() => {
    const playBtn = document.getElementById('crypto-play');
    if (playBtn) {
        console.log('üéØ Found crypto animation elements, initializing...');
        initializeCryptoAnimation();
        clearInterval(cryptoChecker);
    }
}, 1000);

// ============ VERIFIER ANIMATION JAVASCRIPT ============
function initializeVerifierAnimation() {
    const loadBtn = document.getElementById('loadFromStorage');
    const verifyBtn = document.getElementById('verifyRun');
    const resetBtn = document.getElementById('verifyReset');
    const statusEl = document.getElementById('statusV');
    const pkgInput = document.getElementById('pkgInput');
    
    if (!loadBtn || !verifyBtn || !resetBtn || !statusEl || !pkgInput) {
        console.log('‚è≥ Verifier animation elements not found, will retry...');
        return;
    }
    
    console.log('‚úÖ Verifier animation elements found, initializing...');
    
    let busy = false;
    
    // Helper functions
    const sleep = (ms) => new Promise(r => setTimeout(r, ms));
    const enc = (s) => new TextEncoder().encode(s);
    const toHex = (buf) => [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join('');
    const b64urlDecode = (str) => {
        str = str.replace(/-/g, '+').replace(/_/g, '/');
        while (str.length % 4) str += '=';
        return Uint8Array.from(atob(str), c => c.charCodeAt(0));
    };
    const json = (obj) => JSON.stringify(obj, null, 2);
    
    function highlightCard(id) {
        document.getElementById(id).style.border = '2px solid #007bff';
        document.getElementById(id).style.boxShadow = '0 0 10px rgba(0,123,255,0.3)';
    }
    
    function clearHighlight(id) {
        document.getElementById(id).style.border = '2px solid #e9ecef';
        document.getElementById(id).style.boxShadow = 'none';
    }
    
    function stableStringify(obj) {
        if (obj === null || typeof obj !== 'object') return JSON.stringify(obj);
        if (Array.isArray(obj)) return '[' + obj.map(stableStringify).join(',') + ']';
        return '{' + Object.keys(obj).sort().map(k => JSON.stringify(k) + ':' + stableStringify(obj[k])).join(',') + '}';
    }
    
    async function runVerification() {
        if (busy) return;
        busy = true;
        verifyBtn.disabled = true;
        resetBtn.disabled = false;
        
        try {
            statusEl.textContent = 'ƒêang x√°c minh...';
            
            // Parse input package
            const pkgText = pkgInput.value.trim();
            if (!pkgText) {
                throw new Error('Vui l√≤ng nh·∫≠p g√≥i tin c·∫ßn x√°c minh');
            }
            
            let pkg;
            try {
                pkg = JSON.parse(pkgText);
            } catch {
                throw new Error('G√≥i tin kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON');
            }
            
            if (!pkg.tx || !pkg.alicePublicKey || !pkg.signature) {
                throw new Error('G√≥i tin thi·∫øu th√¥ng tin: c·∫ßn c√≥ tx, alicePublicKey, signature');
            }
            
            // STEP 1: Split package
            highlightCard('v1');
            document.getElementById('vSplit').innerHTML = `<div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">üì¶ G√≥i tin ƒë∆∞·ª£c t√°ch th√†nh:</div>
<div style="color: #28a745; font-size: 10px; margin-bottom: 4px;"><strong>‚Ä¢ Transaction:</strong></div>
<div style="font-size: 9px; color: #495057; margin-bottom: 8px;">${json(pkg.tx)}</div>
<div style="color: #28a745; font-size: 10px; margin-bottom: 4px;"><strong>‚Ä¢ Public Key:</strong></div>
<div style="font-size: 9px; color: #495057; margin-bottom: 8px;">${JSON.stringify(pkg.alicePublicKey, null, 1)}</div>
<div style="color: #28a745; font-size: 10px;"><strong>‚Ä¢ Signature:</strong></div>
<div style="font-size: 9px; color: #495057;">${pkg.signature.slice(0, 40)}...</div>`;
            await sleep(1500);
            
            // STEP 2: Hash transaction again
            clearHighlight('v1');
            highlightCard('v2');
            document.getElementById('machine-status-v').textContent = 'ƒêang bƒÉm l·∫°i giao d·ªãch...';
            
            const txString = stableStringify(pkg.tx);
            const hashBuf = await crypto.subtle.digest('SHA-256', enc(txString));
            const hashHex = toHex(hashBuf);
            
            document.getElementById('vHash').innerHTML = `<div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">üîÑ BƒÉm l·∫°i Transaction:</div>
<div style="color: #6c757d; font-size: 10px; margin-bottom: 4px;">Input: ${txString.slice(0, 30)}...</div>
<div style="color: #28a745; font-weight: bold; font-size: 10px;">SHA-256 Hash:</div>
<div style="font-size: 9px; color: #495057; word-break: break-all;">0x${hashHex}</div>`;
            document.getElementById('machine-status-v').textContent = 'Ho√†n th√†nh bƒÉm!';
            await sleep(1500);
            
            // STEP 3: Verify signature  
            clearHighlight('v2');
            highlightCard('v3');
            
            // Import public key
            const pubKey = await crypto.subtle.importKey(
                'jwk',
                pkg.alicePublicKey,
                { name: 'ECDSA', namedCurve: 'P-256' },
                false,
                ['verify']
            );
            
            // Decode signature
            const sigBuf = b64urlDecode(pkg.signature);
            
            // Verify signature
            const isValid = await crypto.subtle.verify(
                { name: 'ECDSA', hash: 'SHA-256' },
                pubKey,
                sigBuf,
                hashBuf
            );
            
            document.getElementById('vVerify').innerHTML = `<div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">üîê X√°c minh ch·ªØ k√Ω:</div>
<div style="color: #6c757d; font-size: 10px; margin-bottom: 4px;">Public Key: ${pkg.alicePublicKey.x.slice(0, 20)}...</div>
<div style="color: #6c757d; font-size: 10px; margin-bottom: 4px;">Signature: ${pkg.signature.slice(0, 20)}...</div>
<div style="color: #6c757d; font-size: 10px; margin-bottom: 8px;">Hash: 0x${hashHex.slice(0, 20)}...</div>
<div style="color: ${isValid ? '#28a745' : '#dc3545'}; font-weight: bold; font-size: 12px;">
${isValid ? '‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ' : '‚ùå Ch·ªØ k√Ω KH√îNG H·ª¢P L·ªÜ'}
</div>`;
            await sleep(1500);
            
            // STEP 4: Final comparison and result
            clearHighlight('v3');
            highlightCard('v4');
            
            const result = isValid ? 'TH√ÄNH C√îNG' : 'TH·∫§T B·∫†I';
            const resultColor = isValid ? '#28a745' : '#dc3545';
            const resultIcon = isValid ? '‚úÖ' : '‚ùå';
            
            document.getElementById('vCompare').innerHTML = `<div style="color: #007bff; font-weight: bold; margin-bottom: 8px;">üéØ K·∫øt qu·∫£ x√°c minh:</div>
<div style="background: ${isValid ? '#d4edda' : '#f8d7da'}; border: 1px solid ${isValid ? '#c3e6cb' : '#f5c6cb'}; border-radius: 6px; padding: 12px; margin-bottom: 8px;">
<div style="color: ${resultColor}; font-weight: bold; font-size: 14px; text-align: center;">
${resultIcon} ${result}
</div>
</div>
<div style="color: #6c757d; font-size: 9px; line-height: 1.2;">
${isValid 
    ? 'Ch·ªØ k√Ω h·ª£p l·ªá - g√≥i tin ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.' 
    : 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá - g√≥i tin c√≥ th·ªÉ b·ªã thay ƒë·ªïi.'}
</div>`;
            
            statusEl.textContent = `X√°c minh ho√†n t·∫•t: ${result}`;
            await sleep(1000);
            clearHighlight('v4');
            
        } catch (error) {
            console.error('Verification error:', error);
            statusEl.textContent = 'L·ªói: ' + error.message;
            ['v1', 'v2', 'v3', 'v4'].forEach(clearHighlight);
        }
        
        busy = false;
        verifyBtn.disabled = false;
    }
    
    function resetVerification() {
        document.getElementById('vSplit').innerHTML = '<code>// ‚Ä¶</code>';
        document.getElementById('vHash').innerHTML = '<code>// ‚Ä¶</code>';
        document.getElementById('vVerify').innerHTML = '<code>// ‚Ä¶</code>';
        document.getElementById('vCompare').innerHTML = '<code>// ‚Ä¶</code>';
        document.getElementById('machine-status-v').textContent = 'M√°y bƒÉm ƒëang ch·ªù‚Ä¶';
        statusEl.textContent = 'Idle.';
        ['v1', 'v2', 'v3', 'v4'].forEach(clearHighlight);
        
        // Clear input text
        pkgInput.value = '';
        
        verifyBtn.disabled = false;
        resetBtn.disabled = true;
    }
    
    function loadFromStorage() {
        if (window.cryptoPackageData) {
            pkgInput.value = json(window.cryptoPackageData);
            statusEl.textContent = 'ƒê√£ load g√≥i tin t·ª´ b·ªô nh·ªõ.';
        } else {
            statusEl.textContent = 'Kh√¥ng t√¨m th·∫•y g√≥i tin trong b·ªô nh·ªõ.';
        }
    }
    
    // Event listeners
    verifyBtn.addEventListener('click', runVerification);
    resetBtn.addEventListener('click', resetVerification);
    loadBtn.addEventListener('click', loadFromStorage);
}

// Initialize verifier when slide is loaded
setTimeout(() => {
    const verifyChecker = setInterval(() => {
        const verifyBtn = document.getElementById('verifyRun');
        if (verifyBtn) {
            console.log('üéØ Found verifier elements, initializing...');
            initializeVerifierAnimation();
            clearInterval(verifyChecker);
        }
    }, 1000);
}, 500);

// ============ MERKLE TREE ANIMATION ============
function initializeMerkleAnimation() {
    const playBtn = document.getElementById('merkle-play');
    const resetBtn = document.getElementById('merkle-reset');
    const statusEl = document.getElementById('merkle-status');
    const svg = document.getElementById('merkle-svg');
    
    if (!playBtn || !resetBtn || !statusEl || !svg) {
        console.log('‚è≥ Merkle animation elements not found, will retry...');
        return;
    }
    
    console.log('‚úÖ Merkle animation elements found, initializing...');
    
    let busy = false;
    
    // Helper functions
    const sleep = (ms) => new Promise(r => setTimeout(r, ms));
    
    // Positions (gi·ªëng nh∆∞ code tham kh·∫£o)
    const positions = {
        A: {x: 100, y: 280}, B: {x: 220, y: 280}, C: {x: 420, y: 280}, D: {x: 540, y: 280},
        AB: {x: 160, y: 190}, CD: {x: 480, y: 190}, ABCD: {x: 320, y: 100}
    };
    
    function clearSvg() {
        while (svg.lastChild) svg.removeChild(svg.lastChild);
    }
    
    function createNode(id, label, klass) {
        const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        g.setAttribute('class', `node ${klass}`);
        g.setAttribute('id', `merkle-${id}`);
        
        const pos = positions[id];
        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('cx', pos.x);
        circle.setAttribute('cy', pos.y);
        circle.setAttribute('r', 20);
        
        // Styling based on class
        if (klass === 'leaf') {
            circle.setAttribute('fill', '#ef4444');
            circle.setAttribute('stroke', '#dc2626');
        } else if (klass === 'parent') {
            circle.setAttribute('fill', '#60a5fa');
            circle.setAttribute('stroke', '#3b82f6');
        } else if (klass === 'root') {
            circle.setAttribute('fill', '#f59e0b');
            circle.setAttribute('stroke', '#d97706');
        }
        circle.setAttribute('stroke-width', '3');
        circle.setAttribute('opacity', '0.8');
        
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', pos.x);
        text.setAttribute('y', pos.y + 5);
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('fill', 'white');
        text.setAttribute('font-size', '14');
        text.setAttribute('font-weight', 'bold');
        text.textContent = label;
        
        g.appendChild(circle);
        g.appendChild(text);
        svg.appendChild(g);
        return g;
    }
    
    function createLine(from, to, opacity = 0.1) {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', positions[from].x);
        line.setAttribute('y1', positions[from].y);
        line.setAttribute('x2', positions[to].x);
        line.setAttribute('y2', positions[to].y);
        line.setAttribute('stroke', '#7b86d1');
        line.setAttribute('stroke-width', '3');
        line.setAttribute('opacity', opacity);
        line.setAttribute('id', `line-${from}-${to}`);
        svg.appendChild(line);
        return line;
    }
    
    function drawEdgeAnimated(from, to, duration = 600) {
        return new Promise(resolve => {
            const line = document.getElementById(`line-${from}-${to}`);
            if (!line) {
                resolve();
                return;
            }
            
            const dx = positions[to].x - positions[from].x;
            const dy = positions[to].y - positions[from].y;
            const length = Math.hypot(dx, dy);
            
            line.style.strokeDasharray = length;
            line.style.strokeDashoffset = length;
            line.style.opacity = '0.8';
            
            const startTime = performance.now();
            function animate(time) {
                const progress = Math.min(1, (time - startTime) / duration);
                line.style.strokeDashoffset = (1 - progress) * length;
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    // Sau khi ho√†n th√†nh, gi·ªØ ƒë∆∞·ªùng hi·ªÉn th·ªã
                    line.style.strokeDasharray = 'none';
                    line.style.strokeDashoffset = '0';
                    resolve();
                }
            }
            requestAnimationFrame(animate);
        });
    }
    
    function renderInitialNodes() {
        clearSvg();
        
        // V·∫Ω t·∫•t c·∫£ ƒë∆∞·ªùng n·ªëi tr∆∞·ªõc (s·∫Ω n·∫±m d∆∞·ªõi nodes)
        createLine('A', 'AB');
        createLine('B', 'AB');
        createLine('C', 'CD');
        createLine('D', 'CD');
        createLine('AB', 'ABCD');
        createLine('CD', 'ABCD');
        
        // Sau ƒë√≥ v·∫Ω c√°c nodes (s·∫Ω n·∫±m tr√™n ƒë∆∞·ªùng n·ªëi)
        createNode('A', 'Tx A', 'leaf');
        createNode('B', 'Tx B', 'leaf');
        createNode('C', 'Tx C', 'leaf');
        createNode('D', 'Tx D', 'leaf');
        createNode('AB', 'H(A+B)', 'parent');
        createNode('CD', 'H(C+D)', 'parent');
        createNode('ABCD', 'Root', 'root');
    }
    
    async function playAnimation() {
        if (busy) return;
        busy = true;
        playBtn.disabled = true;
        resetBtn.disabled = true;
        statusEl.textContent = 'ƒêang x√¢y d·ª±ng c√¢y Merkle...';
        
        try {
            // Step 1: Kh·ªüi t·∫°o d·ªØ li·ªáu g·ªëc
            statusEl.textContent = 'B∆∞·ªõc 1: Kh·ªüi t·∫°o d·ªØ li·ªáu g·ªëc (Transactions)';
            await sleep(800);
            
            // Step 2: Build AB
            statusEl.textContent = 'B∆∞·ªõc 2: T·∫°o hash trung gian H(A+B)';
            await Promise.all([
                drawEdgeAnimated('A', 'AB', 600),
                drawEdgeAnimated('B', 'AB', 600)
            ]);
            await sleep(500);
            
            // Step 3: Build CD
            statusEl.textContent = 'B∆∞·ªõc 3: T·∫°o hash trung gian H(C+D)';
            await Promise.all([
                drawEdgeAnimated('C', 'CD', 600),
                drawEdgeAnimated('D', 'CD', 600)
            ]);
            await sleep(500);
            
            // Step 4: Build Root
            statusEl.textContent = 'B∆∞·ªõc 4: T·∫°o Merkle Root t·ª´ c√°c hash trung gian';
            await Promise.all([
                drawEdgeAnimated('AB', 'ABCD', 700),
                drawEdgeAnimated('CD', 'ABCD', 700)
            ]);
            
            statusEl.textContent = 'Ho√†n th√†nh! C√¢y Merkle ƒë√£ ƒë∆∞·ª£c x√¢y d·ª±ng. ‚úÖ';
            resetBtn.disabled = false;
            
        } catch (error) {
            console.error('Merkle animation error:', error);
            statusEl.textContent = 'L·ªói: ' + error.message;
        }
        
        busy = false;
        playBtn.disabled = false;
    }
    
    function resetAnimation() {
        renderInitialNodes();
        statusEl.textContent = 'S·∫µn s√†ng x√¢y d·ª±ng c√¢y.';
        playBtn.disabled = false;
        resetBtn.disabled = true;
        busy = false;
    }
    
    // Event listeners
    playBtn.addEventListener('click', playAnimation);
    resetBtn.addEventListener('click', resetAnimation);
    
    // Initial render
    renderInitialNodes();
}

// Initialize Merkle animation when slide is loaded
setTimeout(() => {
    const merkleChecker = setInterval(() => {
        const merkleBtn = document.getElementById('merkle-play');
        if (merkleBtn) {
            console.log('üéØ Found merkle elements, initializing...');
            initializeMerkleAnimation();
            clearInterval(merkleChecker);
        }
    }, 1000);
}, 500);
